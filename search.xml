<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <url>/2017/05/01/article2/</url>
      <content type="html"><![CDATA[<p>###1.函数调用</p>
<p>　　首先需要从函数的调用开始讲起。</p>
<p>JS（ES5）里面有三种函数调用形式：</p>
<pre><code>func(p1, p2)
obj.child.method(p1, p2)
func.call(context, p1, p2) // 先不讲 apply
</code></pre><p>　　前面两种是常见的形式，其实后一种才是正常调用形式：</p>
<pre><code>func.call(context, p1, p2)
</code></pre><p>　　前两种可以等价地变为 call 形式：</p>
<pre><code>func(p1, p2) 等价于
func.call(undefined, p1, p2)

obj.child.method(p1, p2) 等价于
obj.child.method.call(obj.child, p1, p2)
</code></pre><p>　　请记下来。（我们称此代码为「转换代码」，方便下文引用）</p>
<p>　　至此我们的函数调用只有一种形式：</p>
<pre><code>func.call(context, p1, p2)
</code></pre><p>　　这样，this 就好解释了–this，就是上面代码中的 context。就这么简单。</p>
<p>　　先看 func(p1, p2) 中的 this 如何确定：</p>
<p>　　当你写下面代码时</p>
<pre><code>function func(){
  console.log(this)
}

func()等价于：

function func(){
  console.log(this)
}

 func.call(undefined) // 可以简写为 func.call()
</code></pre><p>　　按理说打印出来的 this 应该就是 undefined 了吧，但是浏览器里有一条规则：</p>
<p>　　如果你传的 context 就 null 或者 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）<br>　　因此上面的打印结果是 window。</p>
<p>　　如果你希望这里的 this 不是 window，很简单：</p>
<p>func.call(obj) // 那么里面的 this 就是 obj 对象了</p>
<p>再看 obj.child.method(p1, p2) 的 this 如何确定</p>
<pre><code>var obj = {
  foo: function(){
console.log(this)
  }
}

obj.foo()
</code></pre><p>按照「转换代码」，我们将 obj.foo() 转换为</p>
<pre><code>obj.foo.call(obj)
</code></pre><p>好了，this 就是 obj。搞定。</p>
<p>回到题目：</p>
<pre><code>var obj = {
  foo: function(){
    console.log(this)
  }
}

var bar = obj.foo
obj.foo() // 转换为obj.foo.call(obj)，this 就是 obj

bar()
// 转换为 bar.call()
// 由于没有传 context
// 所以 this 就是 undefined
// 最后浏览器给你一个默认的 this —— window 对象
</code></pre><p>[ ] 语法</p>
<pre><code>function fn (){ console.log(this) }
var arr = [fn, fn2]
arr[0]() // 这里面的 this 又是什么呢？
</code></pre><p>　　我们可以把 arr<a href="">0</a> 想象为arr.0( )，虽然后者的语法错了，但是形式与转换代码里的 obj.child.method(p1, p2) 对应上了，于是就可以愉快的转换了：</p>
<p>  arr<a href="">0</a>，假想为    arr.0()<br>然后转换为 arr.0.call(arr)<br>那么里面的 this 就是 arr 了 :) </p>
<p>总结</p>
<p>　　this 就是你 call 一个函数时，传入的 context。<br>　　如果你的函数调用形式不是 call 形式，请按照「转换代码」将其转换为 call 形式。</p>
<h3 id="2-this机制的四种规则"><a href="#2-this机制的四种规则" class="headerlink" title="2.this机制的四种规则"></a>2.this机制的四种规则</h3><p>　　this到底绑定或者引用的是哪个对象环境决定于函数被调用的地方。而函数的调用有不同的方式，在不同的方式中调用决定this引用的是哪个对象是由四种规则确定的。我们一个个来看。<br>　　<br>2.1 默认绑定全局变量</p>
<p>　　这条规则是最常见的，也是默认的。当函数被单独定义和调用的时候，应用的规则就是绑定全局变量。如下：</p>
<pre><code>function fn() {
console.log( this.a );
}
var a = 2;
fn(); // 2 -- fn单独调用，this引用window
</code></pre><p>2.2 隐式绑定</p>
<p>　　隐式调用的意思是，函数调用时拥有一个上下文对象，就好像这个函数是属于该对象的一样。例如：</p>
<pre><code>function fn() {
console.log( this.a );
}
var obj = {
a: 2,
fn: fn
};
obj.fn(); // 2 -- this引用obj。
</code></pre><p>　　需要说明的一点是，最后一个调用该函数的对象是传到函数的上下文对象（绕懵了）。如：</p>
<pre><code>function fn() {
console.log( this.a );
}
var obj2 = {
a: 42,
fn: fn
};
var obj1 = {
a: 2,
obj2: obj2
};
obj1.obj2.fn(); // 42 -- this引用的是obj2.
</code></pre><p>　　还有一点要说明的是，失去隐式绑定的情况，如下：</p>
<pre><code>function fn() {
console.log( this.a );
}
var obj = {
a: 2,
fn: fn
};
var bar = obj.fn; // 函数引用传递
var a = &quot;全局&quot;; // 定义全局变量
bar(); // &quot;全局&quot;
</code></pre><p>　　如上，第8行虽然有隐式绑定，但是它执行的效果明显是把fn赋给bar。这样bar执行的时候，依然是默认绑定全局变量，所以输出结果如上。</p>
<p>2.3 显示绑定</p>
<p>　　学过bind()\apply()\call()函数的都应该知道，它接收的第一个参数即是上下文对象并将其赋给this。看下面的例子：</p>
<pre><code>function fn() {
console.log( this.a );
}
var obj = {
a: 2
};
fn.call( obj ); // 2
</code></pre><p>　　如果我们传递第一个值为简单值，那么后台会自动转换为对应的封装对象。如果传递为null，那么结果就是在绑定默认全局变量，如：</p>
<pre><code>function fn() {
 console.log( this.a );
}
var obj = {
 a: 2
};
var a = 10;
fn.call( null); // 10
</code></pre><p>2.4 new新对象绑定</p>
<p>　　如果是一个构造函数，那么用new来调用，那么绑定的将是新创建的对象。如：</p>
<pre><code>function fn(a) {
this.a = a;
}
var bar = new fn( 2 );
console.log( bar.a );// 2
</code></pre><p>　　注意，一般构造函数名首字母大写，这里没有大写的原因是想提醒读者，构造函数也是一般的函数而已。
　</p>
]]></content>
      
        
        <tags>
            
            <tag> article </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何用Hexo和Github搭建个人博客]]></title>
      <url>/2017/04/22/article1/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>——关于为什么搭建个人博客<br>　　很多人都用过QQ空间和微博，虽然它们可以满足我们发表日志、照片等动态的需求，但是其界面基本大同小异。而个人博客则可以由我们自身个性化地行搭建装饰，你可以在上面诉说你的生活琐事，也可以发表你对行业的独特见解。作为想要立志在互联网行业拼搏的人，博客的搭建是你对所学知识应用的开始，而运营博客则体现一个人的水平及修养。</p>
<hr>
<h3 id="步骤说明"><a href="#步骤说明" class="headerlink" title="步骤说明"></a>步骤说明</h3><blockquote>
<p><strong>1.什么是Hexo?</strong></p>
</blockquote>
<p>　　Hexo是一个开源的静态博客生成器,用node.js开发。Hexo 使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a id="more"></a>　</p>
<blockquote>
<p><strong>2.从配置Github开始</strong></p>
</blockquote>
<p>　　首先注册或登录github.com，记住自己的用户名，之后点击右上角Create a new repository，<img src="/img/1.png" alt=""><br>　　配置生成自己仓库，其中yourname.github.io就是你的博客域名，例如我的域名是<a href="http://github.com/youglin" target="_blank" rel="external">http://github.com/youglin</a><br>　　<img src="/img/4.jpg" alt=""></p>
<blockquote>
<p><strong>3.环境安装（node.js、git bash和文本编辑器）</strong></p>
</blockquote>
<p>　（1）Node.js可在其官网根据自己电脑的配置进行安装就行了。但是git for windows直接从国内官网下载比较困难，我的做法是下载一个翻墙软件（叫什么加速器来着），可以免费使用一小时，用它下载git bash。文本编辑器我推荐的是Notepad++，用来更改配置文件。<br>　安装好之后在cmd面板中输入命令检查是否安装成功，如下：<img src="/img/2.jpg" alt=""><br>　<br>　安装成功之后，git bash需要进行一些配置，大概就是下面一些命令，如不明白请自行搜索。</p>
<pre><code>git config --global user.email 
</code></pre><p>  email为你注册Github时的邮箱地址</p>
<pre><code>git config --global user.name 
</code></pre><p> name为你注册Github时的用户名</p>
<pre><code>ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot;
</code></pre><p>接着系统生成ssh，在Blog中找到.ssh文件夹打开（Notepad++），复制里面内容，登陆github，依次点击settings － SSH keys  － add ssh keys（把上面复制的内容全部添加进去即可）</p>
<blockquote>
<p><strong>4.安装hexo</strong></p>
</blockquote>
<p>　　在cmd面板中输入 :</p>
<pre><code>npm install -g hexo-cli
</code></pre><p>　　看到相关的成功提示后即可。</p>
<blockquote>
<p><strong>5.生成hexo</strong></p>
</blockquote>
<p>　　在电脑D盘（自己定）新建文件夹Blog，打开Blog，按住Shift键点击鼠标右键，再点击“在此处打开命令窗口”，输入：</p>
<pre><code>hexo init blog
</code></pre><p>稍等之后，系统成功提示：</p>
<pre><code>INFO  Start blogging with Hexo!
</code></pre><p>　　<br>此后，hexo指的就是你的Blog文件夹里的文件。hexo生成之后其source目录中带有一篇hello world的文章，接着你在面板中执行</p>
<pre><code>hexo generate（也可写作hexo g，表示生成新内容）

再启动本地服务器：

hexo server

之后在浏览器输入http://localhost:4000/就可以看见网页和模板了。系统成功提示：

INFO  Start processing
INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.
</code></pre><p><img src="/img/3.jpg" alt=""></p>
<blockquote>
<p><strong>6.将博客发布到Github</strong></p>
</blockquote>
<p>（1）部署之前先修改Blog/_config.yml文件（冒号后面一定要有空格，如下面”type:”和”git”之间有空格。）</p>
<pre><code>deploy:
  type: git
  repository: https://github.com/youglin/youglin.github.io.git  (youglin替换为你自己的用户名)
  branch: master
</code></pre><p>（2）进行发布，即在面板中输入：</p>
<pre><code>hexo deploy
</code></pre><p>注：如果执行上述命令报错，你可以试试下面这个命令再试。</p>
<pre><code>npm install hexo-deployer-git--save
</code></pre><p>（3）部署成功后，你在浏览器中输入youglin.github.io，就能看到和本地一样的效果了。(youglin改为你的用户名）</p>
<p><strong>注意：</strong> 如果使用cmd面板发布博客过程报错，从官网下载Github桌面版，解压安装到指定文件夹之后，在桌面会生成如下两个快捷方式：<br><img src="/img/5.jpg" alt=""></p>
<p>其中Git Shell可用来代替cmd面板发布博客，Github可用于将hexo文件上传到你的线上Github仓库中，方法可自行搜索。</p>
<blockquote>
<p><strong>7.配置博客</strong></p>
</blockquote>
<p>在Blog目录下，用Notepad++打开_config.yml文件，参数信息如下：</p>
<pre><code># Hexo Configuration
## Docs: http://hexo.io/docs/configuration.html
## Source: https://github.com/hexojs/hexo/
# Site #站点信息
title:  #标题
subtitle:  #副标题
description:  #站点描述，给搜索引擎看的
author:  #作者
email:  #电子邮箱
language: zh-CN #语言
# URL #链接格式
url:  #网址
root: / #根目录
......
</code></pre><p><strong>特别提醒，在每个参数的：后都要加一个空格</strong></p>
<p><strong>修改网站相关信息:</strong></p>
<p>title: 你的博客标题<br>subtitle: 副标题<br>description: 网页描述<br>author: 林<br>language: zh-CN<br>timezone: #这里不要改动，保持默认状态</p>
<blockquote>
<p><strong>8.更改主题</strong></p>
</blockquote>
<p>　　hexo默认的主题为landscape，相信很多人都觉得不够炫，网上有很多的hexo主题，我用的是Next，其配置方式较为简单，直接在Next官网根据其提示进行相应的操作即可。
　　</p>
<blockquote>
<p><strong>9.发表新文章</strong></p>
</blockquote>
<p>在cmd（如果不行，用Git Shell)中输入：</p>
<pre><code>cd D:\test（定位到hexo目录中）
hexo new &quot;新文章标题&quot;
系统提示：INFO  Created: D:\test\source\_posts\新文章标题.md
</code></pre><p>在该目录下找到该文章，打开，使用Markdown语法，该语法介绍可以上网查看。</p>
<pre><code>---
title: 崔斯特测试文章
date: 2017-02-28 13:03:44
tags:
---
这是一篇测试文章，欢迎关注作者博客[1]: https://youglin.github.io/
</code></pre><p>保存文章更改，然后执行下列步骤：</p>
<pre><code>hexo generate
INFO  Start processing
INFO  Files loaded in 1.48 s
#省略
INFO  29 files generated in 4.27 s

cd D:\test
hexo server
INFO  Start processing
INFO  Hexo is running at     http://localhost:4000/. Press Ctrl+C to stop.
</code></pre><p><strong>再发布到网上</strong></p>
<pre><code>cd D:\test
hexo deploy
INFO  Deploying: git
INFO  Clearing .deploy_git folder...
INFO  Copying files from public folder...
#省略
</code></pre><blockquote>
<p><strong>10.总结</strong></p>
</blockquote>
<p>　　1.为什么我的博客网址显示的是www.yourlin.cn我不是youglin.github.io，因为yourlin.cn是我在腾讯云的域名，并且我把Github中博客的域名youglin.github.io映射到了www.yourlin.cn中，因此两个都可以访问到。<br>　　2.这也是我第一次搭建个人博客，前后用了几天时间，看了网上的很多教程，也请教了我的同学，还有很多功能需要去完善和开发，一起努力吧！</p>
]]></content>
      
        
        <tags>
            
            <tag> article </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/04/20/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
